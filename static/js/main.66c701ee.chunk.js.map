{"version":3,"sources":["Component/User.js","Services/action/userAction.js","Services/Types.js","App.js","serviceWorker.js","Services/reducers/userReducer.js","Services/reducers/index.js","Services/Store.js","index.js"],"names":["connect","state","loading","userReducer","users","error","userList","dispatch","a","type","axios","get","res","console","log","data","payload","message","useEffect","map","user","title","App","className","User","Boolean","window","location","hostname","match","initialState","combineReducers","action","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"gTA4BeA,eANS,SAACC,GAAD,MAAY,CAChCC,QAASD,EAAME,YAAYD,QAC3BE,MAAMH,EAAME,YAAYC,MACxBC,MAAOJ,EAAME,YAAYE,SAGU,CAACC,SCzBhB,WACpB,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEAECD,EAAS,CACLE,KCJa,kBDClB,SAKkBC,IAAMC,IAAI,0CAL5B,OAKOC,EALP,OAMCC,QAAQC,IAAIF,EAAIG,MAChBR,EAAS,CACLE,KCRiB,oBDSjBO,QAASJ,EAAIG,OATlB,gDAaCR,EAAS,CACLE,KCbgB,mBDchBO,QAAS,KAAMC,UAfpB,yDAAP,wDDwBWjB,EAxBH,SAAC,GAAmC,IAAlCM,EAAiC,EAAjCA,SAASJ,EAAwB,EAAxBA,QAAQE,EAAgB,EAAhBA,MAAMC,EAAU,EAAVA,MAMjC,OAJAa,qBAAU,WACNZ,MACF,IAGE,6BACEJ,EAAU,4CAAwBG,EAAO,4BAAKA,GAAa,6BACtDD,EAAMe,KAAI,SAAAC,GACP,OAAO,4BAAKA,EAAKC,eGDpBC,MATf,WACE,OACE,yBAAKC,UAAU,OAEd,kBAACC,EAAD,QCIeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBChBAC,EAAe,CACjB5B,SAAS,EACTE,MAAM,GACNC,MAAM,ICDK0B,cAAgB,CAC3B5B,YDGW,WAAqC,IAA5BF,EAA2B,uDAApB6B,EAAaE,EAAO,uCAC/C,OAAOA,EAAOvB,MACV,IHPqB,gBGQrB,kCACOR,GADP,IAEIC,SAAQ,IAEZ,IHXyB,oBGYrB,kCACOD,GADP,IAEIC,SAAS,EACTE,MAAM4B,EAAOhB,UAErB,IHhBwB,mBGiBxB,kCAAUf,GAAV,IAAgBC,SAAQ,EAChBE,MAAM,GACNC,MAAO2B,EAAOhB,UAEtB,QACI,OAAOf,M,QEpBNgC,EAAQC,YACjBC,EAHiB,GAIjBC,YAAgBC,MCApBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,GACjB,kBAAC,EAAD,QAGFQ,SAASC,eAAe,SJoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLQ,QAAQR,MAAMA,EAAMY,c","file":"static/js/main.66c701ee.chunk.js","sourcesContent":["import React,{useEffect} from 'react'\r\nimport {userList} from '../Services/action/userAction'\r\nimport {connect} from 'react-redux'\r\n\r\nconst Users=({userList,loading,users,error})=> {\r\n    \r\n    useEffect(()=>{\r\n        userList()\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n         {loading ? <h3>loading.....</h3> : error? <h3>{error}</h3>: <div>\r\n              {users.map(user=> {\r\n                  return <h4>{user.title}</h4>\r\n              })\r\n              }\r\n              </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    loading: state.userReducer.loading,\r\n    users:state.userReducer.users,\r\n    error: state.userReducer.error\r\n})\r\n\r\nexport default connect(mapStateToProps,{userList})(Users)","import {users_request,get_users_success,get_users_failed} from '../Types'\r\nimport axios from 'axios'\r\n\r\nexport const userList = ()=>{\r\n    return async (dispatch)=>{\r\n        try{\r\n            dispatch({\r\n                type:users_request\r\n            })\r\n            const res= await axios.get('https://jsonplaceholder.typicode.com/p')\r\n            console.log(res.data)\r\n            dispatch({\r\n                type: get_users_success,\r\n                payload: res.data\r\n            })\r\n\r\n        } catch(error){\r\n            dispatch({\r\n                type:get_users_failed,\r\n                payload: error.message\r\n            })\r\n        }\r\n    }\r\n}","export const increment_value = 'increment'\r\nexport const decrement_value = 'decrement'\r\n\r\nexport const users_request = 'users_request'\r\nexport const get_users_success = 'get_users_success'\r\nexport const get_users_failed = 'get_users_failed'\r\n","import React from 'react';\nimport './App.css';\n\nimport User from './Component/User'\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n     <User/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {users_request,get_users_success,get_users_failed} from '../Types'\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    users:[],\r\n    error:''\r\n}\r\n\r\nexport default function(state= initialState,action){\r\n    switch(action.type){\r\n        case users_request:\r\n        return{\r\n            ...state,\r\n            loading:true\r\n        }\r\n        case get_users_success:\r\n            return{\r\n                ...state,\r\n                loading: false,\r\n                users:action.payload\r\n            }\r\n        case get_users_failed: \r\n        return{...state,loading:false,\r\n                users:[],\r\n                error: action.payload\r\n        }\r\n        default:\r\n            return state \r\n    }\r\n}","import {combineReducers} from 'redux'\r\n\r\nimport userReducer from './userReducer'\r\n\r\nexport default combineReducers({\r\n    userReducer\r\n})","import {applyMiddleware, createStore} from 'redux'\r\n\r\nimport rootReducer from './reducers'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst initialState = {};\r\n\r\nexport const store = createStore(\r\n    rootReducer,initialState,\r\n    applyMiddleware(thunk)\r\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from './Services/Store'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}